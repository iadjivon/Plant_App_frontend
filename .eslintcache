[{"/Users/idaadjivon/Desktop/Destop All /TECH/seir-flex-zen-work/projects/Unit 4 - project/plant_app_client/src/index.js":"1","/Users/idaadjivon/Desktop/Destop All /TECH/seir-flex-zen-work/projects/Unit 4 - project/plant_app_client/src/App.js":"2","/Users/idaadjivon/Desktop/Destop All /TECH/seir-flex-zen-work/projects/Unit 4 - project/plant_app_client/src/reportWebVitals.js":"3","/Users/idaadjivon/Desktop/Destop All /TECH/seir-flex-zen-work/projects/Unit 4 - project/plant_app_client/src/components/display.js":"4","/Users/idaadjivon/Desktop/Destop All /TECH/seir-flex-zen-work/projects/Unit 4 - project/plant_app_client/src/components/Display.js":"5","/Users/idaadjivon/Desktop/Destop All /TECH/seir-flex-zen-work/projects/Unit 4 - project/plant_app_client/src/components/Form.js":"6","/Users/idaadjivon/Desktop/Destop All /TECH/seir-flex-zen-work/projects/Unit 4 - project/plant_app_client/src/components/Show.js":"7"},{"size":584,"mtime":1607676201230,"results":"8","hashOfConfig":"9"},{"size":3965,"mtime":1607817764297,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1607583361484,"results":"11","hashOfConfig":"9"},{"size":906,"mtime":1607674214176,"results":"12","hashOfConfig":"9"},{"size":2048,"mtime":1607759351757,"results":"13","hashOfConfig":"9"},{"size":1602,"mtime":1607816985463,"results":"14","hashOfConfig":"9"},{"size":421,"mtime":1607820871691,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"11btphx",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/idaadjivon/Desktop/Destop All /TECH/seir-flex-zen-work/projects/Unit 4 - project/plant_app_client/src/index.js",[],["32","33"],"/Users/idaadjivon/Desktop/Destop All /TECH/seir-flex-zen-work/projects/Unit 4 - project/plant_app_client/src/App.js",["34","35"],"import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport {Route, Link, Switch} from 'react-router-dom'\n\nimport Display from './components/Display';\nimport Form from './components/Form';\nimport Show from './components/Show';\n\nimport Nav from 'react-bootstrap/Nav'\nimport Button from 'react-bootstrap/Button'\n\n\nfunction App () {\n// VARIABLE TO HOLD PLANTS \n    const url = \"http://localhost:3000\"\n// // state to hold plants \n    const [plants, setPlants] = React.useState([])\n\n// // FUNCTION TO HOLD EMPTY PLANT \nconst emptyPlant = {\n  plant_name: \"\",\n  description: \"\",\n  image: \"\",\n  pet_name: \"\",\n};\n\n\n// STATE TO HOLD PLANT DATA\nconst [selectedPlant, setSelectedPlant] = React.useState(emptyPlant)\n\n// // Function to get plants via API\nconst getPlants = () => {\n   fetch(url + \"/plants/\")\n   .then(response => response.json()\n  .then(data => {\n    setPlants(data)\n  }))\n }\n\nReact.useEffect(()=>{\n    getPlants()\n}, [])\n\n\n// HANDLE CREATE FUNCTION FOR WHEN THE FORM IS SUBMITTED\nconst handleCreate = (newPlant)=>{\n   fetch(url + \"/plants\", {\n    method: \"post\",\n    headers:{\n      \"Content-type\":\"application/json\"\n    },\n    body: JSON.stringify(newPlant)\n  }).then(response => {\n    getPlants()\n  })\n}\n\n\n\n// HANDLE UPDATE FUNCTION \nconst handleUpdate = (plant)=>{\n fetch(url + \"/plants/\" + plant.id, {\n    method: \"put\",\n    headers:{\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify(plant)\n  }).then(response => getPlants())\n}\n\nconst selectPlant = (plant) => {\n    setSelectedPlant(plant);\n    }\n\nconst deletePlant = (plant)=>{\n  fetch(url + \"/plants/\" + plant.id, {\n    method: \"delete\",\n\n}).then((response)=>getPlants())\n}\n\n/////////////////////////////\n// RETURN FUNCTION\n/////////////////////////////\n\n    return (\n      <div className=\"App\">\n        \n  <header className=\"header\"> \n  <div className=\"overshadow\"> \n        <h1 className=\"title\">Novice Plant Mother</h1>\n    <Nav className=\"justify-content-center\"> \n        <Nav.Item>\n        <Link to=\"/create\">\n          <button className=\"header-btn\"> Add New Plant</button>\n        </Link>\n        </Nav.Item>\n        <Nav.Item>\n        <Link to=\"/\">\n          <button className=\"header-btn\"> Home</button>\n        </Link>\n        </Nav.Item>\n    </Nav>\n    </div>\n  </header> \n  \n  <div className=\"division\">\n\n  </div>\n<main className=\"main\">\n  \n{/* <div className=\"main-1\">\n        {/* <img src=\"https://i.pinimg.com/originals/5a/35/62/5a356215f119a1d812e470e464bdb3fd.jpg\"/> */}\n      {/* </div> */} \n\n<div className=\"main-2\">\n\n          <Switch>\n            <Route exact path=\"/\" render = {(rp)=>\n            <Display selectPlant={selectPlant}\n                  {...rp} plants={plants}\n                deletePlant={deletePlant}/>} />\n\n            <Route \n              exact path=\"/create\"\n              render={(rp) => (\n                <>\n                <h1 className=\"form-title\"> Let's welcome a new plant! </h1>\n                <Form {...rp} label=\"create\" plant={{emptyPlant}}\n                 handleSubmit=\n                {handleCreate} />\n                </>\n                )}\n            />\n\n            <Route\n              exact path=\"/edit\"\n              render={(rp) => (\n                <>\n                <h1 className=\"form-title\"> Let's make a quick adjustment. </h1>\n                <Form {...rp} label=\"update\" plant={selectedPlant} handleSubmit={handleUpdate} />\n                </>\n                )}\n            />\n        \n        <Route \n          exact path=\"/plants/:id\"\n          render={(rp) => (\n            <Show {...rp} plant={selectedPlant}/>)\n          }\n        />\n\n          </Switch>\n\n          </div>   \n      </main>\n       \n<footer className=\"footer\">\n   \n    <a href=\"https://github.com/iadjivon\"> <h5> Github </h5></a> \n    <hr className=\"hr\"></hr>\n    <a href=\"https://www.linkedin.com/in/ida-adjivon/\"> <h5> LinkedIn</h5></a> \n  \n    \n    \n   \n\n  </footer>\n      </div>\n  );\n}\n\n\n\nexport default App;\n","/Users/idaadjivon/Desktop/Destop All /TECH/seir-flex-zen-work/projects/Unit 4 - project/plant_app_client/src/reportWebVitals.js",[],"/Users/idaadjivon/Desktop/Destop All /TECH/seir-flex-zen-work/projects/Unit 4 - project/plant_app_client/src/components/display.js",[],"/Users/idaadjivon/Desktop/Destop All /TECH/seir-flex-zen-work/projects/Unit 4 - project/plant_app_client/src/components/Display.js",[],"/Users/idaadjivon/Desktop/Destop All /TECH/seir-flex-zen-work/projects/Unit 4 - project/plant_app_client/src/components/Form.js",[],"/Users/idaadjivon/Desktop/Destop All /TECH/seir-flex-zen-work/projects/Unit 4 - project/plant_app_client/src/components/Show.js",["36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":1,"column":8,"nodeType":"43","messageId":"44","endLine":1,"endColumn":12},{"ruleId":"41","severity":1,"message":"45","line":11,"column":8,"nodeType":"43","messageId":"44","endLine":11,"endColumn":14},{"ruleId":"46","severity":1,"message":"47","line":14,"column":13,"nodeType":"48","endLine":14,"endColumn":38},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]